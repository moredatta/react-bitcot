/// <reference types="node" />
import { IConnection, IConnectEvent, IConnectionManager, IConnectionData } from "./types";
declare type ApiGatewayConnectionManagerParams = {
    connectionManagerStorage?: Map<string, IConnection>;
};
export declare class ApiGatewayConnectionManager implements IConnectionManager {
    private apiGatewayManager;
    connections: Map<string, IConnection>;
    constructor({ connectionManagerStorage }: ApiGatewayConnectionManagerParams);
    hydrateOrRegisterConnection: (connectionId: string, endpoint: string) => Promise<IConnection>;
    hydrateConnection: (connectionId: string) => Promise<IConnection>;
    setConnectionData: (data: IConnectionData, connection: IConnection) => Promise<void>;
    registerConnection: ({ connectionId, endpoint, }: IConnectEvent) => Promise<IConnection>;
    sendToConnection: (connection: IConnection, payload: string | Buffer) => Promise<void>;
    unregisterConnection: (connection: IConnection) => Promise<void>;
    closeConnection: (connection: IConnection) => Promise<void>;
    /**
     * Creates api gateway manager
     *
     * If custom api gateway manager is provided, uses it instead
     */
    private createApiGatewayManager;
}
export {};
