"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayConnectionManager = void 0;
// import * as WebSocket from 'ws';
const errors_1 = require("./errors");
const aws_sdk_1 = require("aws-sdk");
class ConnectionNotFoundError extends errors_1.ExtendableError {
}
class ApiGatewayConnectionManager {
    constructor({ connectionManagerStorage }) {
        this.hydrateOrRegisterConnection = async (connectionId, endpoint) => {
            console.log("hydrateOrRegisterConnection", connectionId);
            let connection = this.connections.get(connectionId);
            if (connection == null) {
                connection = {
                    id: connectionId,
                    data: { endpoint, context: {}, isInitialized: true },
                };
                this.connections.set(connectionId, connection);
            }
            return connection;
        };
        this.hydrateConnection = async (connectionId) => {
            // if connection is not found, throw so we can terminate connection
            console.log("hydrateConnection", connectionId);
            const connection = this.connections.get(connectionId);
            if (connection == null) {
                throw new ConnectionNotFoundError(`Connection ${connectionId} not found`);
            }
            return connection;
        };
        this.setConnectionData = async (data, connection) => {
            console.log("sendToConnection", connection, data);
            this.connections.set(connection.id, {
                id: connection.id,
                data,
            });
        };
        this.registerConnection = async ({ connectionId, endpoint, }) => {
            console.log("registerConnection", connectionId);
            const connection = {
                id: connectionId,
                data: { endpoint, context: {}, isInitialized: false },
            };
            this.connections.set(connectionId, connection);
            return connection;
        };
        this.sendToConnection = async (connection, payload) => {
            console.log("sendToConnection", { connection, payload });
            try {
                await this.createApiGatewayManager(connection.data.endpoint)
                    .postToConnection({ ConnectionId: connection.id, Data: payload })
                    .promise();
            }
            catch (e) {
                console.log("failed to send", e);
                // this is stale connection
                // remove it from DB
                if (e && e.statusCode === 410) {
                    await this.unregisterConnection(connection);
                }
                else {
                    throw e;
                }
            }
        };
        this.unregisterConnection = async (connection) => {
            console.log("unregisterConnection", connection);
            this.connections.delete(connection.id);
        };
        this.closeConnection = async (connection) => {
            console.log("closeConnection", connection);
            setTimeout(() => {
                // wait so we can send error message first
                console.log("CLOSE CONNECTION:", connection);
            }, 10);
        };
        this.connections = connectionManagerStorage || new Map();
    }
    /**
     * Creates api gateway manager
     *
     * If custom api gateway manager is provided, uses it instead
     */
    createApiGatewayManager(endpoint) {
        if (this.apiGatewayManager) {
            return this.apiGatewayManager;
        }
        this.apiGatewayManager = new aws_sdk_1.ApiGatewayManagementApi({
            endpoint,
            apiVersion: "2018-11-29",
        });
        return this.apiGatewayManager;
    }
}
exports.ApiGatewayConnectionManager = ApiGatewayConnectionManager;
//# sourceMappingURL=ApiGatewayConnectionManager.js.map